import {
  Control_exports,
  init_Control
} from "./chunk-AM34J4Y6.js";
import "./chunk-3UKZBJ7L.js";
import {
  Group_exports,
  init_Group
} from "./chunk-AF5NQ7AC.js";
import "./chunk-4X7YR7UH.js";
import "./chunk-L34RGYAE.js";
import "./chunk-KFVHZ4ZX.js";
import "./chunk-UJLNMLNK.js";
import "./chunk-ZK24VY2W.js";
import "./chunk-5JXRKF6F.js";
import {
  Observable_exports,
  init_Observable
} from "./chunk-J5U7SJYM.js";
import {
  __commonJS
} from "./chunk-P3NQKPC7.js";

// node_modules/ol-layerswitcher/dist/ol-layerswitcher.js
var require_ol_layerswitcher = __commonJS({
  "node_modules/ol-layerswitcher/dist/ol-layerswitcher.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory((init_Control(), Control_exports), (init_Observable(), Observable_exports), (init_Group(), Group_exports)) : typeof define === "function" && define.amd ? define(["ol/control/Control", "ol/Observable", "ol/layer/Group"], factory) : global.LayerSwitcher = factory(global.ol.control.Control, global.ol.Observable, global.ol.layer.Group);
    })(exports, function(Control, ol_Observable, LayerGroup) {
      "use strict";
      Control = "default" in Control ? Control["default"] : Control;
      LayerGroup = "default" in LayerGroup ? LayerGroup["default"] : LayerGroup;
      var classCallCheck = function(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      };
      var createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var get = function get2(object, property, receiver) {
        if (object === null)
          object = Function.prototype;
        var desc = Object.getOwnPropertyDescriptor(object, property);
        if (desc === void 0) {
          var parent = Object.getPrototypeOf(object);
          if (parent === null) {
            return void 0;
          } else {
            return get2(parent, property, receiver);
          }
        } else if ("value" in desc) {
          return desc.value;
        } else {
          var getter = desc.get;
          if (getter === void 0) {
            return void 0;
          }
          return getter.call(receiver);
        }
      };
      var inherits = function(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      };
      var possibleConstructorReturn = function(self, call) {
        if (!self) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self;
      };
      var CSS_PREFIX = "layer-switcher-";
      var LayerSwitcher = function(_Control) {
        inherits(LayerSwitcher2, _Control);
        function LayerSwitcher2(opt_options) {
          classCallCheck(this, LayerSwitcher2);
          var options = Object.assign({}, opt_options);
          var tipLabel = options.tipLabel ? options.tipLabel : "Legend";
          var collapseTipLabel = options.collapseTipLabel ? options.collapseTipLabel : "Collapse legend";
          var element = document.createElement("div");
          var _this = possibleConstructorReturn(this, (LayerSwitcher2.__proto__ || Object.getPrototypeOf(LayerSwitcher2)).call(this, { element, target: options.target }));
          _this.activationMode = options.activationMode || "mouseover";
          _this.startActive = options.startActive === true;
          var label = options.label !== void 0 ? options.label : "";
          var collapseLabel = options.collapseLabel !== void 0 ? options.collapseLabel : "\xBB";
          _this.groupSelectStyle = LayerSwitcher2.getGroupSelectStyle(options.groupSelectStyle);
          _this.reverse = options.reverse !== false;
          _this.mapListeners = [];
          _this.hiddenClassName = "ol-unselectable ol-control layer-switcher";
          if (LayerSwitcher2.isTouchDevice_()) {
            _this.hiddenClassName += " touch";
          }
          _this.shownClassName = "shown";
          element.className = _this.hiddenClassName;
          var button = document.createElement("button");
          button.setAttribute("title", tipLabel);
          button.setAttribute("aria-label", tipLabel);
          element.appendChild(button);
          _this.panel = document.createElement("div");
          _this.panel.className = "panel";
          element.appendChild(_this.panel);
          LayerSwitcher2.enableTouchScroll_(_this.panel);
          button.textContent = label;
          element.classList.add(CSS_PREFIX + "group-select-style-" + _this.groupSelectStyle);
          element.classList.add(CSS_PREFIX + "activation-mode-" + _this.activationMode);
          if (_this.activationMode === "click") {
            element.classList.add("activationModeClick");
            if (_this.startActive) {
              button.textContent = collapseLabel;
              button.setAttribute("title", collapseTipLabel);
              button.setAttribute("aria-label", collapseTipLabel);
            }
            button.onclick = function(e) {
              var evt = e || window.event;
              if (_this.element.classList.contains(_this.shownClassName)) {
                _this.hidePanel();
                button.textContent = label;
                button.setAttribute("title", tipLabel);
                button.setAttribute("aria-label", tipLabel);
              } else {
                _this.showPanel();
                button.textContent = collapseLabel;
                button.setAttribute("title", collapseTipLabel);
                button.setAttribute("aria-label", collapseTipLabel);
              }
              evt.preventDefault();
            };
          } else {
            button.onmouseover = function() {
              _this.showPanel();
            };
            button.onclick = function(e) {
              var evt = e || window.event;
              _this.showPanel();
              evt.preventDefault();
            };
            _this.panel.onmouseout = function(evt) {
              if (!_this.panel.contains(evt.relatedTarget)) {
                _this.hidePanel();
              }
            };
          }
          return _this;
        }
        createClass(LayerSwitcher2, [{
          key: "setMap",
          value: function setMap(map) {
            var _this2 = this;
            for (var i = 0; i < this.mapListeners.length; i++) {
              ol_Observable.unByKey(this.mapListeners[i]);
            }
            this.mapListeners.length = 0;
            get(LayerSwitcher2.prototype.__proto__ || Object.getPrototypeOf(LayerSwitcher2.prototype), "setMap", this).call(this, map);
            if (map) {
              if (this.startActive) {
                this.showPanel();
              } else {
                this.renderPanel();
              }
              if (this.activationMode !== "click") {
                this.mapListeners.push(map.on("pointerdown", function() {
                  _this2.hidePanel();
                }));
              }
            }
          }
        }, {
          key: "showPanel",
          value: function showPanel() {
            if (!this.element.classList.contains(this.shownClassName)) {
              this.element.classList.add(this.shownClassName);
              this.renderPanel();
            }
          }
        }, {
          key: "hidePanel",
          value: function hidePanel() {
            if (this.element.classList.contains(this.shownClassName)) {
              this.element.classList.remove(this.shownClassName);
            }
          }
        }, {
          key: "renderPanel",
          value: function renderPanel() {
            this.dispatchEvent("render");
            LayerSwitcher2.renderPanel(this.getMap(), this.panel, {
              groupSelectStyle: this.groupSelectStyle,
              reverse: this.reverse
            });
            this.dispatchEvent("rendercomplete");
          }
        }], [{
          key: "renderPanel",
          value: function renderPanel(map, panel, options) {
            var render_event = new Event("render");
            panel.dispatchEvent(render_event);
            options = options || {};
            options.groupSelectStyle = LayerSwitcher2.getGroupSelectStyle(options.groupSelectStyle);
            LayerSwitcher2.ensureTopVisibleBaseLayerShown(map, options.groupSelectStyle);
            while (panel.firstChild) {
              panel.removeChild(panel.firstChild);
            }
            LayerSwitcher2.forEachRecursive(map, function(l, _idx, _a) {
              l.set("indeterminate", false);
            });
            if (options.groupSelectStyle === "children" || options.groupSelectStyle === "none") {
              LayerSwitcher2.setGroupVisibility(map);
            } else if (options.groupSelectStyle === "group") {
              LayerSwitcher2.setChildVisibility(map);
            }
            var ul = document.createElement("ul");
            panel.appendChild(ul);
            LayerSwitcher2.renderLayers_(map, map, ul, options, function render(_changedLyr) {
              LayerSwitcher2.renderPanel(map, panel, options);
            });
            var rendercomplete_event = new Event("rendercomplete");
            panel.dispatchEvent(rendercomplete_event);
          }
        }, {
          key: "isBaseGroup",
          value: function isBaseGroup(grp) {
            if (grp instanceof LayerGroup) {
              var lyrs = grp.getLayers().getArray();
              return lyrs.length && lyrs[0].get("type") === "base";
            } else {
              return false;
            }
          }
        }, {
          key: "setGroupVisibility",
          value: function setGroupVisibility(map) {
            var groups = LayerSwitcher2.getGroupsAndLayers(map, function(l) {
              return l instanceof LayerGroup && !l.get("combine") && !LayerSwitcher2.isBaseGroup(l);
            }).reverse();
            groups.forEach(function(grp) {
              var descendantVisibility = grp.getLayersArray().map(function(l) {
                var state = l.getVisible();
                return state;
              });
              if (descendantVisibility.every(function(v) {
                return v === true;
              })) {
                grp.setVisible(true);
                grp.set("indeterminate", false);
              } else if (descendantVisibility.every(function(v) {
                return v === false;
              })) {
                grp.setVisible(false);
                grp.set("indeterminate", false);
              } else {
                grp.setVisible(true);
                grp.set("indeterminate", true);
              }
            });
          }
        }, {
          key: "setChildVisibility",
          value: function setChildVisibility(map) {
            var groups = LayerSwitcher2.getGroupsAndLayers(map, function(l) {
              return l instanceof LayerGroup && !l.get("combine") && !LayerSwitcher2.isBaseGroup(l);
            });
            groups.forEach(function(grp) {
              var group = grp;
              var groupVisible = group.getVisible();
              var groupIndeterminate = group.get("indeterminate");
              group.getLayers().getArray().forEach(function(l) {
                l.set("indeterminate", false);
                if ((!groupVisible || groupIndeterminate) && l.getVisible()) {
                  l.set("indeterminate", true);
                }
              });
            });
          }
        }, {
          key: "ensureTopVisibleBaseLayerShown",
          value: function ensureTopVisibleBaseLayerShown(map, groupSelectStyle) {
            var lastVisibleBaseLyr = void 0;
            LayerSwitcher2.forEachRecursive(map, function(lyr, _idx, _arr) {
              if (lyr.get("type") === "base" && lyr.getVisible()) {
                lastVisibleBaseLyr = lyr;
              }
            });
            if (lastVisibleBaseLyr)
              LayerSwitcher2.setVisible_(map, lastVisibleBaseLyr, true, groupSelectStyle);
          }
        }, {
          key: "getGroupsAndLayers",
          value: function getGroupsAndLayers(grp, filterFn) {
            var layers = [];
            filterFn = filterFn || function(_lyr, _idx, _arr) {
              return true;
            };
            LayerSwitcher2.forEachRecursive(grp, function(lyr, idx, arr) {
              if (lyr.get("title")) {
                if (filterFn(lyr, idx, arr)) {
                  layers.push(lyr);
                }
              }
            });
            return layers;
          }
        }, {
          key: "setVisible_",
          value: function setVisible_(map, lyr, visible, groupSelectStyle) {
            lyr.setVisible(visible);
            if (visible && lyr.get("type") === "base") {
              LayerSwitcher2.forEachRecursive(map, function(l, _idx, _arr) {
                if (l != lyr && l.get("type") === "base") {
                  l.setVisible(false);
                }
              });
            }
            if (lyr instanceof LayerGroup && !lyr.get("combine") && groupSelectStyle === "children") {
              lyr.getLayers().forEach(function(l) {
                LayerSwitcher2.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);
              });
            }
          }
        }, {
          key: "renderLayer_",
          value: function renderLayer_(map, lyr, idx, options, render) {
            var li = document.createElement("li");
            var lyrTitle = lyr.get("title");
            var checkboxId = LayerSwitcher2.uuid();
            var label = document.createElement("label");
            if (lyr instanceof LayerGroup && !lyr.get("combine")) {
              var isBaseGroup = LayerSwitcher2.isBaseGroup(lyr);
              li.classList.add("group");
              if (isBaseGroup) {
                li.classList.add(CSS_PREFIX + "base-group");
              }
              if (lyr.get("fold")) {
                li.classList.add(CSS_PREFIX + "fold");
                li.classList.add(CSS_PREFIX + lyr.get("fold"));
                var btn = document.createElement("button");
                btn.onclick = function(e) {
                  var evt = e || window.event;
                  LayerSwitcher2.toggleFold_(lyr, li);
                  evt.preventDefault();
                };
                li.appendChild(btn);
              }
              if (!isBaseGroup && options.groupSelectStyle != "none") {
                var input = document.createElement("input");
                input.type = "checkbox";
                input.id = checkboxId;
                input.checked = lyr.getVisible();
                input.indeterminate = lyr.get("indeterminate");
                input.onchange = function(e) {
                  var target = e.target;
                  LayerSwitcher2.setVisible_(map, lyr, target.checked, options.groupSelectStyle);
                  render(lyr);
                };
                li.appendChild(input);
                label.htmlFor = checkboxId;
              }
              label.innerHTML = lyrTitle;
              li.appendChild(label);
              var ul = document.createElement("ul");
              li.appendChild(ul);
              LayerSwitcher2.renderLayers_(map, lyr, ul, options, render);
            } else {
              li.className = "layer";
              var _input = document.createElement("input");
              if (lyr.get("type") === "base") {
                _input.type = "radio";
                _input.name = "base";
              } else {
                _input.type = "checkbox";
              }
              _input.id = checkboxId;
              _input.checked = lyr.get("visible");
              _input.indeterminate = lyr.get("indeterminate");
              _input.onchange = function(e) {
                var target = e.target;
                LayerSwitcher2.setVisible_(map, lyr, target.checked, options.groupSelectStyle);
                render(lyr);
              };
              li.appendChild(_input);
              label.htmlFor = checkboxId;
              label.innerHTML = lyrTitle;
              var rsl = map.getView().getResolution();
              if (rsl > lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {
                label.className += " disabled";
              }
              li.appendChild(label);
            }
            return li;
          }
        }, {
          key: "renderLayers_",
          value: function renderLayers_(map, lyr, elm, options, render) {
            var lyrs = lyr.getLayers().getArray().slice();
            if (options.reverse)
              lyrs = lyrs.reverse();
            for (var i = 0, l; i < lyrs.length; i++) {
              l = lyrs[i];
              if (l.get("title")) {
                elm.appendChild(LayerSwitcher2.renderLayer_(map, l, i, options, render));
              }
            }
          }
        }, {
          key: "forEachRecursive",
          value: function forEachRecursive(lyr, fn) {
            lyr.getLayers().forEach(function(lyr2, idx, a) {
              fn(lyr2, idx, a);
              if (lyr2 instanceof LayerGroup) {
                LayerSwitcher2.forEachRecursive(lyr2, fn);
              }
            });
          }
        }, {
          key: "uuid",
          value: function uuid() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
              var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
              return v.toString(16);
            });
          }
        }, {
          key: "enableTouchScroll_",
          value: function enableTouchScroll_(elm) {
            if (LayerSwitcher2.isTouchDevice_()) {
              var scrollStartPos = 0;
              elm.addEventListener("touchstart", function(event) {
                scrollStartPos = this.scrollTop + event.touches[0].pageY;
              }, false);
              elm.addEventListener("touchmove", function(event) {
                this.scrollTop = scrollStartPos - event.touches[0].pageY;
              }, false);
            }
          }
        }, {
          key: "isTouchDevice_",
          value: function isTouchDevice_() {
            try {
              document.createEvent("TouchEvent");
              return true;
            } catch (e) {
              return false;
            }
          }
        }, {
          key: "toggleFold_",
          value: function toggleFold_(lyr, li) {
            li.classList.remove(CSS_PREFIX + lyr.get("fold"));
            lyr.set("fold", lyr.get("fold") === "open" ? "close" : "open");
            li.classList.add(CSS_PREFIX + lyr.get("fold"));
          }
        }, {
          key: "getGroupSelectStyle",
          value: function getGroupSelectStyle(groupSelectStyle) {
            return ["none", "children", "group"].indexOf(groupSelectStyle) >= 0 ? groupSelectStyle : "children";
          }
        }]);
        return LayerSwitcher2;
      }(Control);
      if (window["ol"] && window["ol"]["control"]) {
        window["ol"]["control"]["LayerSwitcher"] = LayerSwitcher;
      }
      return LayerSwitcher;
    });
  }
});

// dep:ol-layerswitcher
var ol_layerswitcher_default = require_ol_layerswitcher();
export {
  ol_layerswitcher_default as default
};
//# sourceMappingURL=ol-layerswitcher.js.map
