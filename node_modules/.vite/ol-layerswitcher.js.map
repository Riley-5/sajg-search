{
  "version": 3,
  "sources": ["../ol-layerswitcher/dist/ol-layerswitcher.js", "dep:ol-layerswitcher"],
  "sourcesContent": ["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('ol/control/Control'), require('ol/Observable'), require('ol/layer/Group')) :\n\ttypeof define === 'function' && define.amd ? define(['ol/control/Control', 'ol/Observable', 'ol/layer/Group'], factory) :\n\t(global.LayerSwitcher = factory(global.ol.control.Control,global.ol.Observable,global.ol.layer.Group));\n}(this, (function (Control,ol_Observable,LayerGroup) { 'use strict';\n\nControl = 'default' in Control ? Control['default'] : Control;\nLayerGroup = 'default' in LayerGroup ? LayerGroup['default'] : LayerGroup;\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n/**\n * @protected\n */\nvar CSS_PREFIX = 'layer-switcher-';\n/**\n * OpenLayers LayerSwitcher Control, displays a list of layers and groups\n * associated with a map which have a `title` property.\n *\n * To be shown in the LayerSwitcher panel layers must have a `title` property;\n * base map layers should have a `type` property set to `base`. Group layers\n * (`LayerGroup`) can be used to visually group layers together; a group\n * with a `fold` property set to either `'open'` or `'close'` will be displayed\n * with a toggle.\n *\n * See [BaseLayerOptions](#baselayeroptions) for a full list of LayerSwitcher\n * properties for layers (`TileLayer`, `ImageLayer`, `VectorTile` etc.) and\n * [GroupLayerOptions](#grouplayeroptions) for group layer (`LayerGroup`)\n * LayerSwitcher properties.\n *\n * Layer and group properties can either be set by adding extra properties\n * to their options when they are created or via their set method.\n *\n * Specify a `title` for a Layer by adding a `title` property to it's options object:\n * ```javascript\n * var lyr = new ol.layer.Tile({\n *   // Specify a title property which will be displayed by the layer switcher\n *   title: 'OpenStreetMap',\n *   visible: true,\n *   source: new ol.source.OSM()\n * })\n * ```\n *\n * Alternatively the properties can be set via the `set` method after a layer has been created:\n * ```javascript\n * var lyr = new ol.layer.Tile({\n *   visible: true,\n *   source: new ol.source.OSM()\n * })\n * // Specify a title property which will be displayed by the layer switcher\n * lyr.set('title', 'OpenStreetMap');\n * ```\n *\n * To create a LayerSwitcher and add it to a map, create a new instance then pass it to the map's [`addControl` method](https://openlayers.org/en/latest/apidoc/module-ol_PluggableMap-PluggableMap.html#addControl).\n * ```javascript\n * var layerSwitcher = new LayerSwitcher({\n *   reverse: true,\n *   groupSelectStyle: 'group'\n * });\n * map.addControl(layerSwitcher);\n * ```\n *\n * @constructor\n * @extends {ol/control/Control~Control}\n * @param opt_options LayerSwitcher options, see  [LayerSwitcher Options](#options) and [RenderOptions](#renderoptions) which LayerSwitcher `Options` extends for more details.\n */\n\nvar LayerSwitcher = function (_Control) {\n    inherits(LayerSwitcher, _Control);\n\n    function LayerSwitcher(opt_options) {\n        classCallCheck(this, LayerSwitcher);\n\n        var options = Object.assign({}, opt_options);\n        // TODO Next: Rename to showButtonTitle\n        var tipLabel = options.tipLabel ? options.tipLabel : 'Legend';\n        // TODO Next: Rename to hideButtonTitle\n        var collapseTipLabel = options.collapseTipLabel ? options.collapseTipLabel : 'Collapse legend';\n        var element = document.createElement('div');\n\n        var _this = possibleConstructorReturn(this, (LayerSwitcher.__proto__ || Object.getPrototypeOf(LayerSwitcher)).call(this, { element: element, target: options.target }));\n\n        _this.activationMode = options.activationMode || 'mouseover';\n        _this.startActive = options.startActive === true;\n        // TODO Next: Rename to showButtonContent\n        var label = options.label !== undefined ? options.label : '';\n        // TODO Next: Rename to hideButtonContent\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\xBB';\n        _this.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\n        _this.reverse = options.reverse !== false;\n        _this.mapListeners = [];\n        _this.hiddenClassName = 'ol-unselectable ol-control layer-switcher';\n        if (LayerSwitcher.isTouchDevice_()) {\n            _this.hiddenClassName += ' touch';\n        }\n        _this.shownClassName = 'shown';\n        element.className = _this.hiddenClassName;\n        var button = document.createElement('button');\n        button.setAttribute('title', tipLabel);\n        button.setAttribute('aria-label', tipLabel);\n        element.appendChild(button);\n        _this.panel = document.createElement('div');\n        _this.panel.className = 'panel';\n        element.appendChild(_this.panel);\n        LayerSwitcher.enableTouchScroll_(_this.panel);\n        button.textContent = label;\n        element.classList.add(CSS_PREFIX + 'group-select-style-' + _this.groupSelectStyle);\n        element.classList.add(CSS_PREFIX + 'activation-mode-' + _this.activationMode);\n        if (_this.activationMode === 'click') {\n            // TODO Next: Remove in favour of layer-switcher-activation-mode-click\n            element.classList.add('activationModeClick');\n            if (_this.startActive) {\n                button.textContent = collapseLabel;\n                button.setAttribute('title', collapseTipLabel);\n                button.setAttribute('aria-label', collapseTipLabel);\n            }\n            button.onclick = function (e) {\n                var evt = e || window.event;\n                if (_this.element.classList.contains(_this.shownClassName)) {\n                    _this.hidePanel();\n                    button.textContent = label;\n                    button.setAttribute('title', tipLabel);\n                    button.setAttribute('aria-label', tipLabel);\n                } else {\n                    _this.showPanel();\n                    button.textContent = collapseLabel;\n                    button.setAttribute('title', collapseTipLabel);\n                    button.setAttribute('aria-label', collapseTipLabel);\n                }\n                evt.preventDefault();\n            };\n        } else {\n            button.onmouseover = function () {\n                _this.showPanel();\n            };\n            button.onclick = function (e) {\n                var evt = e || window.event;\n                _this.showPanel();\n                evt.preventDefault();\n            };\n            _this.panel.onmouseout = function (evt) {\n                if (!_this.panel.contains(evt.relatedTarget)) {\n                    _this.hidePanel();\n                }\n            };\n        }\n        return _this;\n    }\n    /**\n     * Set the map instance the control is associated with.\n     * @param map The map instance.\n     */\n\n\n    createClass(LayerSwitcher, [{\n        key: 'setMap',\n        value: function setMap(map) {\n            var _this2 = this;\n\n            // Clean up listeners associated with the previous map\n            for (var i = 0; i < this.mapListeners.length; i++) {\n                ol_Observable.unByKey(this.mapListeners[i]);\n            }\n            this.mapListeners.length = 0;\n            // Wire up listeners etc. and store reference to new map\n            get(LayerSwitcher.prototype.__proto__ || Object.getPrototypeOf(LayerSwitcher.prototype), 'setMap', this).call(this, map);\n            if (map) {\n                if (this.startActive) {\n                    this.showPanel();\n                } else {\n                    this.renderPanel();\n                }\n                if (this.activationMode !== 'click') {\n                    this.mapListeners.push(map.on('pointerdown', function () {\n                        _this2.hidePanel();\n                    }));\n                }\n            }\n        }\n        /**\n         * Show the layer panel.\n         */\n\n    }, {\n        key: 'showPanel',\n        value: function showPanel() {\n            if (!this.element.classList.contains(this.shownClassName)) {\n                this.element.classList.add(this.shownClassName);\n                this.renderPanel();\n            }\n        }\n        /**\n         * Hide the layer panel.\n         */\n\n    }, {\n        key: 'hidePanel',\n        value: function hidePanel() {\n            if (this.element.classList.contains(this.shownClassName)) {\n                this.element.classList.remove(this.shownClassName);\n            }\n        }\n        /**\n         * Re-draw the layer panel to represent the current state of the layers.\n         */\n\n    }, {\n        key: 'renderPanel',\n        value: function renderPanel() {\n            this.dispatchEvent('render');\n            LayerSwitcher.renderPanel(this.getMap(), this.panel, {\n                groupSelectStyle: this.groupSelectStyle,\n                reverse: this.reverse\n            });\n            this.dispatchEvent('rendercomplete');\n        }\n        /**\n         * **_[static]_** - Re-draw the layer panel to represent the current state of the layers.\n         * @param map The OpenLayers Map instance to render layers for\n         * @param panel The DOM Element into which the layer tree will be rendered\n         * @param options Options for panel, group, and layers\n         */\n\n    }], [{\n        key: 'renderPanel',\n        value: function renderPanel(map, panel, options) {\n            // Create the event.\n            var render_event = new Event('render');\n            // Dispatch the event.\n            panel.dispatchEvent(render_event);\n            options = options || {};\n            options.groupSelectStyle = LayerSwitcher.getGroupSelectStyle(options.groupSelectStyle);\n            LayerSwitcher.ensureTopVisibleBaseLayerShown(map, options.groupSelectStyle);\n            while (panel.firstChild) {\n                panel.removeChild(panel.firstChild);\n            }\n            // Reset indeterminate state for all layers and groups before\n            // applying based on groupSelectStyle\n            LayerSwitcher.forEachRecursive(map, function (l, _idx, _a) {\n                l.set('indeterminate', false);\n            });\n            if (options.groupSelectStyle === 'children' || options.groupSelectStyle === 'none') {\n                // Set visibile and indeterminate state of groups based on\n                // their children's visibility\n                LayerSwitcher.setGroupVisibility(map);\n            } else if (options.groupSelectStyle === 'group') {\n                // Set child indetermiate state based on their parent's visibility\n                LayerSwitcher.setChildVisibility(map);\n            }\n            var ul = document.createElement('ul');\n            panel.appendChild(ul);\n            // passing two map arguments instead of lyr as we're passing the map as the root of the layers tree\n            LayerSwitcher.renderLayers_(map, map, ul, options, function render(_changedLyr) {\n                LayerSwitcher.renderPanel(map, panel, options);\n            });\n            // Create the event.\n            var rendercomplete_event = new Event('rendercomplete');\n            // Dispatch the event.\n            panel.dispatchEvent(rendercomplete_event);\n        }\n        /**\n         * **_[static]_** - Determine if a given layer group contains base layers\n         * @param grp Group to test\n         */\n\n    }, {\n        key: 'isBaseGroup',\n        value: function isBaseGroup(grp) {\n            if (grp instanceof LayerGroup) {\n                var lyrs = grp.getLayers().getArray();\n                return lyrs.length && lyrs[0].get('type') === 'base';\n            } else {\n                return false;\n            }\n        }\n    }, {\n        key: 'setGroupVisibility',\n        value: function setGroupVisibility(map) {\n            // Get a list of groups, with the deepest first\n            var groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\n                return l instanceof LayerGroup && !l.get('combine') && !LayerSwitcher.isBaseGroup(l);\n            }).reverse();\n            // console.log(groups.map(g => g.get('title')));\n            groups.forEach(function (grp) {\n                // TODO Can we use getLayersArray, is it public in the esm build?\n                var descendantVisibility = grp.getLayersArray().map(function (l) {\n                    var state = l.getVisible();\n                    // console.log('>', l.get('title'), state);\n                    return state;\n                });\n                // console.log(descendantVisibility);\n                if (descendantVisibility.every(function (v) {\n                    return v === true;\n                })) {\n                    grp.setVisible(true);\n                    grp.set('indeterminate', false);\n                } else if (descendantVisibility.every(function (v) {\n                    return v === false;\n                })) {\n                    grp.setVisible(false);\n                    grp.set('indeterminate', false);\n                } else {\n                    grp.setVisible(true);\n                    grp.set('indeterminate', true);\n                }\n            });\n        }\n    }, {\n        key: 'setChildVisibility',\n        value: function setChildVisibility(map) {\n            // console.log('setChildVisibility');\n            var groups = LayerSwitcher.getGroupsAndLayers(map, function (l) {\n                return l instanceof LayerGroup && !l.get('combine') && !LayerSwitcher.isBaseGroup(l);\n            });\n            groups.forEach(function (grp) {\n                var group = grp;\n                // console.log(group.get('title'));\n                var groupVisible = group.getVisible();\n                var groupIndeterminate = group.get('indeterminate');\n                group.getLayers().getArray().forEach(function (l) {\n                    l.set('indeterminate', false);\n                    if ((!groupVisible || groupIndeterminate) && l.getVisible()) {\n                        l.set('indeterminate', true);\n                    }\n                });\n            });\n        }\n        /**\n         * Ensure only the top-most base layer is visible if more than one is visible.\n         * @param map The map instance.\n         * @param groupSelectStyle\n         * @protected\n         */\n\n    }, {\n        key: 'ensureTopVisibleBaseLayerShown',\n        value: function ensureTopVisibleBaseLayerShown(map, groupSelectStyle) {\n            var lastVisibleBaseLyr = void 0;\n            LayerSwitcher.forEachRecursive(map, function (lyr, _idx, _arr) {\n                if (lyr.get('type') === 'base' && lyr.getVisible()) {\n                    lastVisibleBaseLyr = lyr;\n                }\n            });\n            if (lastVisibleBaseLyr) LayerSwitcher.setVisible_(map, lastVisibleBaseLyr, true, groupSelectStyle);\n        }\n        /**\n         * **_[static]_** - Get an Array of all layers and groups displayed by the LayerSwitcher (has a `'title'` property)\n         * contained by the specified map or layer group; optionally filtering via `filterFn`\n         * @param grp The map or layer group for which layers are found.\n         * @param filterFn Optional function used to filter the returned layers\n         */\n\n    }, {\n        key: 'getGroupsAndLayers',\n        value: function getGroupsAndLayers(grp, filterFn) {\n            var layers = [];\n            filterFn = filterFn || function (_lyr, _idx, _arr) {\n                return true;\n            };\n            LayerSwitcher.forEachRecursive(grp, function (lyr, idx, arr) {\n                if (lyr.get('title')) {\n                    if (filterFn(lyr, idx, arr)) {\n                        layers.push(lyr);\n                    }\n                }\n            });\n            return layers;\n        }\n        /**\n         * Toggle the visible state of a layer.\n         * Takes care of hiding other layers in the same exclusive group if the layer\n         * is toggle to visible.\n         * @protected\n         * @param map The map instance.\n         * @param lyr layer whose visibility will be toggled.\n         * @param visible Set whether the layer is shown\n         * @param groupSelectStyle\n         * @protected\n         */\n\n    }, {\n        key: 'setVisible_',\n        value: function setVisible_(map, lyr, visible, groupSelectStyle) {\n            // console.log(lyr.get('title'), visible, groupSelectStyle);\n            lyr.setVisible(visible);\n            if (visible && lyr.get('type') === 'base') {\n                // Hide all other base layers regardless of grouping\n                LayerSwitcher.forEachRecursive(map, function (l, _idx, _arr) {\n                    if (l != lyr && l.get('type') === 'base') {\n                        l.setVisible(false);\n                    }\n                });\n            }\n            if (lyr instanceof LayerGroup && !lyr.get('combine') && groupSelectStyle === 'children') {\n                lyr.getLayers().forEach(function (l) {\n                    LayerSwitcher.setVisible_(map, l, lyr.getVisible(), groupSelectStyle);\n                });\n            }\n        }\n        /**\n         * Render all layers that are children of a group.\n         * @param map The map instance.\n         * @param lyr Layer to be rendered (should have a title property).\n         * @param idx Position in parent group list.\n         * @param options Options for groups and layers\n         * @protected\n         */\n\n    }, {\n        key: 'renderLayer_',\n        value: function renderLayer_(map, lyr, idx, options, render) {\n            var li = document.createElement('li');\n            var lyrTitle = lyr.get('title');\n            var checkboxId = LayerSwitcher.uuid();\n            var label = document.createElement('label');\n            if (lyr instanceof LayerGroup && !lyr.get('combine')) {\n                var isBaseGroup = LayerSwitcher.isBaseGroup(lyr);\n                li.classList.add('group');\n                if (isBaseGroup) {\n                    li.classList.add(CSS_PREFIX + 'base-group');\n                }\n                // Group folding\n                if (lyr.get('fold')) {\n                    li.classList.add(CSS_PREFIX + 'fold');\n                    li.classList.add(CSS_PREFIX + lyr.get('fold'));\n                    var btn = document.createElement('button');\n                    btn.onclick = function (e) {\n                        var evt = e || window.event;\n                        LayerSwitcher.toggleFold_(lyr, li);\n                        evt.preventDefault();\n                    };\n                    li.appendChild(btn);\n                }\n                if (!isBaseGroup && options.groupSelectStyle != 'none') {\n                    var input = document.createElement('input');\n                    input.type = 'checkbox';\n                    input.id = checkboxId;\n                    input.checked = lyr.getVisible();\n                    input.indeterminate = lyr.get('indeterminate');\n                    input.onchange = function (e) {\n                        var target = e.target;\n                        LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\n                        render(lyr);\n                    };\n                    li.appendChild(input);\n                    label.htmlFor = checkboxId;\n                }\n                label.innerHTML = lyrTitle;\n                li.appendChild(label);\n                var ul = document.createElement('ul');\n                li.appendChild(ul);\n                LayerSwitcher.renderLayers_(map, lyr, ul, options, render);\n            } else {\n                li.className = 'layer';\n                var _input = document.createElement('input');\n                if (lyr.get('type') === 'base') {\n                    _input.type = 'radio';\n                    _input.name = 'base';\n                } else {\n                    _input.type = 'checkbox';\n                }\n                _input.id = checkboxId;\n                _input.checked = lyr.get('visible');\n                _input.indeterminate = lyr.get('indeterminate');\n                _input.onchange = function (e) {\n                    var target = e.target;\n                    LayerSwitcher.setVisible_(map, lyr, target.checked, options.groupSelectStyle);\n                    render(lyr);\n                };\n                li.appendChild(_input);\n                label.htmlFor = checkboxId;\n                label.innerHTML = lyrTitle;\n                var rsl = map.getView().getResolution();\n                if (rsl > lyr.getMaxResolution() || rsl < lyr.getMinResolution()) {\n                    label.className += ' disabled';\n                }\n                li.appendChild(label);\n            }\n            return li;\n        }\n        /**\n         * Render all layers that are children of a group.\n         * @param map The map instance.\n         * @param lyr Group layer whose children will be rendered.\n         * @param elm DOM element that children will be appended to.\n         * @param options Options for groups and layers\n         * @protected\n         */\n\n    }, {\n        key: 'renderLayers_',\n        value: function renderLayers_(map, lyr, elm, options, render) {\n            var lyrs = lyr.getLayers().getArray().slice();\n            if (options.reverse) lyrs = lyrs.reverse();\n            for (var i = 0, l; i < lyrs.length; i++) {\n                l = lyrs[i];\n                if (l.get('title')) {\n                    elm.appendChild(LayerSwitcher.renderLayer_(map, l, i, options, render));\n                }\n            }\n        }\n        /**\n         * **_[static]_** - Call the supplied function for each layer in the passed layer group\n         * recursing nested groups.\n         * @param lyr The layer group to start iterating from.\n         * @param fn Callback which will be called for each layer\n         * found under `lyr`.\n         */\n\n    }, {\n        key: 'forEachRecursive',\n        value: function forEachRecursive(lyr, fn) {\n            lyr.getLayers().forEach(function (lyr, idx, a) {\n                fn(lyr, idx, a);\n                if (lyr instanceof LayerGroup) {\n                    LayerSwitcher.forEachRecursive(lyr, fn);\n                }\n            });\n        }\n        /**\n         * **_[static]_** - Generate a UUID\n         * Adapted from http://stackoverflow.com/a/2117523/526860\n         * @returns {String} UUID\n         */\n\n    }, {\n        key: 'uuid',\n        value: function uuid() {\n            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n                var r = Math.random() * 16 | 0,\n                    v = c == 'x' ? r : r & 0x3 | 0x8;\n                return v.toString(16);\n            });\n        }\n        /**\n         * Apply workaround to enable scrolling of overflowing content within an\n         * element. Adapted from https://gist.github.com/chrismbarr/4107472\n         * @param elm Element on which to enable touch scrolling\n         * @protected\n         */\n\n    }, {\n        key: 'enableTouchScroll_',\n        value: function enableTouchScroll_(elm) {\n            if (LayerSwitcher.isTouchDevice_()) {\n                var scrollStartPos = 0;\n                elm.addEventListener('touchstart', function (event) {\n                    scrollStartPos = this.scrollTop + event.touches[0].pageY;\n                }, false);\n                elm.addEventListener('touchmove', function (event) {\n                    this.scrollTop = scrollStartPos - event.touches[0].pageY;\n                }, false);\n            }\n        }\n        /**\n         * Determine if the current browser supports touch events. Adapted from\n         * https://gist.github.com/chrismbarr/4107472\n         * @returns {Boolean} True if client can have 'TouchEvent' event\n         * @protected\n         */\n\n    }, {\n        key: 'isTouchDevice_',\n        value: function isTouchDevice_() {\n            try {\n                document.createEvent('TouchEvent');\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n        /**\n         * Fold/unfold layer group\n         * @param lyr Layer group to fold/unfold\n         * @param li List item containing layer group\n         * @protected\n         */\n\n    }, {\n        key: 'toggleFold_',\n        value: function toggleFold_(lyr, li) {\n            li.classList.remove(CSS_PREFIX + lyr.get('fold'));\n            lyr.set('fold', lyr.get('fold') === 'open' ? 'close' : 'open');\n            li.classList.add(CSS_PREFIX + lyr.get('fold'));\n        }\n        /**\n         * If a valid groupSelectStyle value is not provided then return the default\n         * @param groupSelectStyle The string to check for validity\n         * @returns The value groupSelectStyle, if valid, the default otherwise\n         * @protected\n         */\n\n    }, {\n        key: 'getGroupSelectStyle',\n        value: function getGroupSelectStyle(groupSelectStyle) {\n            return ['none', 'children', 'group'].indexOf(groupSelectStyle) >= 0 ? groupSelectStyle : 'children';\n        }\n    }]);\n    return LayerSwitcher;\n}(Control);\nif (window['ol'] && window['ol']['control']) {\n    window['ol']['control']['LayerSwitcher'] = LayerSwitcher;\n}\n\nreturn LayerSwitcher;\n\n})));\n", "export default require(\"./node_modules/ol-layerswitcher/dist/ol-layerswitcher.js\");"],
  "mappings": "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",
  "names": []
}
