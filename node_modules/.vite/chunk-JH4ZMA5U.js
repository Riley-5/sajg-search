import {
  SimpleGeometry_default,
  init_SimpleGeometry
} from "./chunk-3VF4MG3W.js";
import {
  GeometryType_default,
  init_GeometryType
} from "./chunk-MQA5SFDD.js";
import {
  init_math,
  squaredDistance
} from "./chunk-5JXRKF6F.js";
import {
  Object_default,
  containsXY,
  createOrUpdateFromCoordinate,
  init_Object,
  init_events,
  init_extent,
  listen,
  unlistenByKey
} from "./chunk-J5U7SJYM.js";
import {
  EventType_default,
  __esm,
  __export,
  assert,
  init_EventType,
  init_asserts
} from "./chunk-P3NQKPC7.js";

// node_modules/ol/Feature.js
var Feature_exports = {};
__export(Feature_exports, {
  createStyleFunction: () => createStyleFunction,
  default: () => Feature_default
});
function createStyleFunction(obj) {
  if (typeof obj === "function") {
    return obj;
  } else {
    var styles_1;
    if (Array.isArray(obj)) {
      styles_1 = obj;
    } else {
      assert(typeof obj.getZIndex === "function", 41);
      var style = obj;
      styles_1 = [style];
    }
    return function() {
      return styles_1;
    };
  }
}
var __extends, Feature, Feature_default;
var init_Feature = __esm({
  "node_modules/ol/Feature.js"() {
    init_Object();
    init_EventType();
    init_asserts();
    init_events();
    __extends = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Feature = function(_super) {
      __extends(Feature2, _super);
      function Feature2(opt_geometryOrProperties) {
        var _this = _super.call(this) || this;
        _this.on;
        _this.once;
        _this.un;
        _this.id_ = void 0;
        _this.geometryName_ = "geometry";
        _this.style_ = null;
        _this.styleFunction_ = void 0;
        _this.geometryChangeKey_ = null;
        _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);
        if (opt_geometryOrProperties) {
          if (typeof opt_geometryOrProperties.getSimplifiedGeometry === "function") {
            var geometry = opt_geometryOrProperties;
            _this.setGeometry(geometry);
          } else {
            var properties = opt_geometryOrProperties;
            _this.setProperties(properties);
          }
        }
        return _this;
      }
      Feature2.prototype.clone = function() {
        var clone = new Feature2(this.hasProperties() ? this.getProperties() : null);
        clone.setGeometryName(this.getGeometryName());
        var geometry = this.getGeometry();
        if (geometry) {
          clone.setGeometry(geometry.clone());
        }
        var style = this.getStyle();
        if (style) {
          clone.setStyle(style);
        }
        return clone;
      };
      Feature2.prototype.getGeometry = function() {
        return this.get(this.geometryName_);
      };
      Feature2.prototype.getId = function() {
        return this.id_;
      };
      Feature2.prototype.getGeometryName = function() {
        return this.geometryName_;
      };
      Feature2.prototype.getStyle = function() {
        return this.style_;
      };
      Feature2.prototype.getStyleFunction = function() {
        return this.styleFunction_;
      };
      Feature2.prototype.handleGeometryChange_ = function() {
        this.changed();
      };
      Feature2.prototype.handleGeometryChanged_ = function() {
        if (this.geometryChangeKey_) {
          unlistenByKey(this.geometryChangeKey_);
          this.geometryChangeKey_ = null;
        }
        var geometry = this.getGeometry();
        if (geometry) {
          this.geometryChangeKey_ = listen(geometry, EventType_default.CHANGE, this.handleGeometryChange_, this);
        }
        this.changed();
      };
      Feature2.prototype.setGeometry = function(geometry) {
        this.set(this.geometryName_, geometry);
      };
      Feature2.prototype.setStyle = function(opt_style) {
        this.style_ = opt_style;
        this.styleFunction_ = !opt_style ? void 0 : createStyleFunction(opt_style);
        this.changed();
      };
      Feature2.prototype.setId = function(id) {
        this.id_ = id;
        this.changed();
      };
      Feature2.prototype.setGeometryName = function(name) {
        this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);
        this.geometryName_ = name;
        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);
        this.handleGeometryChanged_();
      };
      return Feature2;
    }(Object_default);
    Feature_default = Feature;
  }
});

// node_modules/ol/geom/flat/deflate.js
function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
  for (var i = 0, ii = coordinate.length; i < ii; ++i) {
    flatCoordinates[offset++] = coordinate[i];
  }
  return offset;
}
function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
  for (var i = 0, ii = coordinates.length; i < ii; ++i) {
    var coordinate = coordinates[i];
    for (var j = 0; j < stride; ++j) {
      flatCoordinates[offset++] = coordinate[j];
    }
  }
  return offset;
}
function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
  var ends = opt_ends ? opt_ends : [];
  var i = 0;
  for (var j = 0, jj = coordinatess.length; j < jj; ++j) {
    var end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
    ends[i++] = end;
    offset = end;
  }
  ends.length = i;
  return ends;
}
function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
  var endss = opt_endss ? opt_endss : [];
  var i = 0;
  for (var j = 0, jj = coordinatesss.length; j < jj; ++j) {
    var ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
    endss[i++] = ends;
    offset = ends[ends.length - 1];
  }
  endss.length = i;
  return endss;
}
var init_deflate = __esm({
  "node_modules/ol/geom/flat/deflate.js"() {
  }
});

// node_modules/ol/geom/Point.js
var Point_exports = {};
__export(Point_exports, {
  default: () => Point_default
});
var __extends2, Point, Point_default;
var init_Point = __esm({
  "node_modules/ol/geom/Point.js"() {
    init_GeometryType();
    init_SimpleGeometry();
    init_extent();
    init_deflate();
    init_math();
    __extends2 = function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Point = function(_super) {
      __extends2(Point2, _super);
      function Point2(coordinates, opt_layout) {
        var _this = _super.call(this) || this;
        _this.setCoordinates(coordinates, opt_layout);
        return _this;
      }
      Point2.prototype.clone = function() {
        var point = new Point2(this.flatCoordinates.slice(), this.layout);
        point.applyProperties(this);
        return point;
      };
      Point2.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {
        var flatCoordinates = this.flatCoordinates;
        var squaredDistance2 = squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
        if (squaredDistance2 < minSquaredDistance) {
          var stride = this.stride;
          for (var i = 0; i < stride; ++i) {
            closestPoint[i] = flatCoordinates[i];
          }
          closestPoint.length = stride;
          return squaredDistance2;
        } else {
          return minSquaredDistance;
        }
      };
      Point2.prototype.getCoordinates = function() {
        return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
      };
      Point2.prototype.computeExtent = function(extent) {
        return createOrUpdateFromCoordinate(this.flatCoordinates, extent);
      };
      Point2.prototype.getType = function() {
        return GeometryType_default.POINT;
      };
      Point2.prototype.intersectsExtent = function(extent) {
        return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
      };
      Point2.prototype.setCoordinates = function(coordinates, opt_layout) {
        this.setLayout(opt_layout, coordinates, 0);
        if (!this.flatCoordinates) {
          this.flatCoordinates = [];
        }
        this.flatCoordinates.length = deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);
        this.changed();
      };
      return Point2;
    }(SimpleGeometry_default);
    Point_default = Point;
  }
});

export {
  Feature_default,
  Feature_exports,
  init_Feature,
  deflateCoordinate,
  deflateCoordinates,
  deflateCoordinatesArray,
  deflateMultiCoordinatesArray,
  init_deflate,
  Point_default,
  Point_exports,
  init_Point
};
//# sourceMappingURL=chunk-JH4ZMA5U.js.map
