import {
  Feature_exports,
  Point_exports,
  init_Feature,
  init_Point
} from "./chunk-JH4ZMA5U.js";
import {
  Vector_exports,
  init_Vector
} from "./chunk-OC53H42F.js";
import "./chunk-3VF4MG3W.js";
import {
  Vector_exports as Vector_exports2,
  init_Vector as init_Vector2
} from "./chunk-KOETMVY4.js";
import "./chunk-P7F7EM6H.js";
import "./chunk-UZMKWAS6.js";
import {
  Icon_exports,
  Style_exports,
  init_Icon,
  init_Style
} from "./chunk-LZKKSTQQ.js";
import "./chunk-E3KT5X32.js";
import "./chunk-L4ZK74UW.js";
import "./chunk-IGYSOPQG.js";
import "./chunk-C7H5CGVI.js";
import "./chunk-6M4UQ5TX.js";
import {
  init_proj,
  proj_exports
} from "./chunk-QVFAELKK.js";
import "./chunk-Z2ZB4XGC.js";
import "./chunk-MQA5SFDD.js";
import {
  Control_exports,
  init_Control
} from "./chunk-AM34J4Y6.js";
import "./chunk-3UKZBJ7L.js";
import "./chunk-4X7YR7UH.js";
import "./chunk-L34RGYAE.js";
import "./chunk-KFVHZ4ZX.js";
import "./chunk-UJLNMLNK.js";
import "./chunk-ZK24VY2W.js";
import "./chunk-5JXRKF6F.js";
import "./chunk-J5U7SJYM.js";
import {
  __commonJS
} from "./chunk-P3NQKPC7.js";

// node_modules/ol-geocoder/dist/ol-geocoder.js
var require_ol_geocoder = __commonJS({
  "node_modules/ol-geocoder/dist/ol-geocoder.js"(exports, module) {
    !function(t, e) {
      typeof exports == "object" && typeof module != "undefined" ? module.exports = e((init_Control(), Control_exports), (init_Style(), Style_exports), (init_Icon(), Icon_exports), (init_Vector(), Vector_exports), (init_Vector2(), Vector_exports2), (init_Point(), Point_exports), (init_Feature(), Feature_exports), (init_proj(), proj_exports)) : typeof define == "function" && define.amd ? define(["ol/control/Control", "ol/style/Style", "ol/style/Icon", "ol/layer/Vector", "ol/source/Vector", "ol/geom/Point", "ol/Feature", "ol/proj"], e) : (t = typeof globalThis != "undefined" ? globalThis : t || self).Geocoder = e(t.ol.control.Control, t.ol.style.Style, t.ol.style.Icon, t.ol.layer.Vector, t.ol.source.Vector, t.ol.geom.Point, t.ol.Feature, t.ol.proj);
    }(exports, function(t, e, n, r, s, o, i, a) {
      "use strict";
      function l(t2) {
        return t2 && typeof t2 == "object" && "default" in t2 ? t2 : { default: t2 };
      }
      var u = l(t), c = l(e), p = l(n), d = l(r), h = l(s), m = l(o), g = l(i), y = l(a), f = "gcd-container", v = "gcd-button-control", b = "gcd-input-query", w = "gcd-input-reset", x = { namespace: "ol-geocoder", spin: "gcd-pseudo-rotate", hidden: "gcd-hidden", address: "gcd-address", country: "gcd-country", city: "gcd-city", road: "gcd-road", olControl: "ol-control", glass: { container: "gcd-gl-container", control: "gcd-gl-control", button: "gcd-gl-btn", input: "gcd-gl-input", expanded: "gcd-gl-expanded", reset: "gcd-gl-reset", result: "gcd-gl-result" }, inputText: { container: "gcd-txt-container", control: "gcd-txt-control", input: "gcd-txt-input", reset: "gcd-txt-reset", icon: "gcd-txt-glass", result: "gcd-txt-result" } }, k = { containerId: f, buttonControlId: v, inputQueryId: b, inputResetId: w, cssClasses: x }, q = Object.freeze({ __proto__: null, containerId: f, buttonControlId: v, inputQueryId: b, inputResetId: w, cssClasses: x, default: k }), C = "addresschosen", S = "nominatim", L = "reverse", E = "glass-button", A = "text-input", T = "osm", j = "mapquest", F = "photon", N = "bing", R = "opencage", P = { provider: T, placeholder: "Search for an address", featureStyle: null, targetType: E, lang: "en-US", limit: 5, keepOpen: false, preventDefault: false, autoComplete: false, autoCompleteMinLength: 2, autoCompleteTimeout: 200, debug: false };
      function I(t2, e2) {
        if (e2 === void 0 && (e2 = "Assertion failed"), !t2) {
          if (typeof Error != "undefined")
            throw new Error(e2);
          throw e2;
        }
      }
      function _(t2) {
        var e2 = function() {
          if ("performance" in window == 0 && (window.performance = {}), "now" in window.performance == 0) {
            var t3 = Date.now();
            performance.timing && performance.timing.navigationStart && (t3 = performance.timing.navigationStart), window.performance.now = function() {
              return Date.now() - t3;
            };
          }
          return window.performance.now();
        }().toString(36);
        return t2 ? t2 + e2 : e2;
      }
      function M(t2) {
        return /^[0-9]+$/.test(t2);
      }
      function O(t2, e2, n2) {
        if (Array.isArray(t2))
          t2.forEach(function(t3) {
            return O(t3, e2);
          });
        else
          for (var r2 = Array.isArray(e2) ? e2 : e2.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/), s2 = r2.length; s2--; )
            V(t2, r2[s2]) || G(t2, r2[s2], n2);
      }
      function D(t2, e2, n2) {
        if (Array.isArray(t2))
          t2.forEach(function(t3) {
            return D(t3, e2, n2);
          });
        else
          for (var r2 = Array.isArray(e2) ? e2 : e2.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/), s2 = r2.length; s2--; )
            V(t2, r2[s2]) && z(t2, r2[s2], n2);
      }
      function V(t2, e2) {
        return t2.classList ? t2.classList.contains(e2) : U(e2).test(t2.className);
      }
      function Q(t2, e2) {
        return t2.replace(/\{[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*([\x2D0-9A-Z_a-z]+)[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*\}/g, function(t3, n2) {
          var r2 = e2[n2] === void 0 ? "" : e2[n2];
          return String(r2).replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll('"', "&quot;").replaceAll("'", "&#039;");
        });
      }
      function B(t2, e2) {
        var n2;
        if (Array.isArray(t2)) {
          if (n2 = document.createElement(t2[0]), t2[1].id && (n2.id = t2[1].id), t2[1].classname && (n2.className = t2[1].classname), t2[1].attr) {
            var r2 = t2[1].attr;
            if (Array.isArray(r2))
              for (var s2 = -1; ++s2 < r2.length; )
                n2.setAttribute(r2[s2].name, r2[s2].value);
            else
              n2.setAttribute(r2.name, r2.value);
          }
        } else
          n2 = document.createElement(t2);
        n2.innerHTML = e2;
        for (var o2 = document.createDocumentFragment(); n2.childNodes[0]; )
          o2.append(n2.childNodes[0]);
        return n2.append(o2), n2;
      }
      function U(t2) {
        return new RegExp("(^|\\s+) " + t2 + " (\\s+|$)", "u");
      }
      function G(t2, e2, n2) {
        t2.classList ? t2.classList.add(e2) : t2.className = (t2.className + " " + e2).trim(), n2 && M(n2) && window.setTimeout(function() {
          return z(t2, e2);
        }, n2);
      }
      function z(t2, e2, n2) {
        t2.classList ? t2.classList.remove(e2) : t2.className = t2.className.replace(U(e2), " ").trim(), n2 && M(n2) && window.setTimeout(function() {
          return G(t2, e2);
        }, n2);
      }
      var $ = q.cssClasses, H = function(t2) {
        this.options = t2.options, this.els = this.createControl();
      };
      H.prototype.createControl = function() {
        var t2, e2, n2;
        return this.options.targetType === A ? (e2 = $.namespace + " " + $.inputText.container, n2 = { container: t2 = B(["div", { id: q.containerId, classname: e2 }], H.input), control: t2.querySelector("." + $.inputText.control), input: t2.querySelector("." + $.inputText.input), reset: t2.querySelector("." + $.inputText.reset), result: t2.querySelector("." + $.inputText.result) }) : (e2 = $.namespace + " " + $.glass.container, n2 = { container: t2 = B(["div", { id: q.containerId, classname: e2 }], H.glass), control: t2.querySelector("." + $.glass.control), button: t2.querySelector("." + $.glass.button), input: t2.querySelector("." + $.glass.input), reset: t2.querySelector("." + $.glass.reset), result: t2.querySelector("." + $.glass.result) }), n2.input.placeholder = this.options.placeholder, n2;
      }, H.glass = '\n  <div class="' + $.glass.control + " " + $.olControl + '">\n    <button type="button" id="' + q.buttonControlId + '" class="' + $.glass.button + '"></button>\n    <input type="text" id="' + q.inputQueryId + '" class="' + $.glass.input + '" autocomplete="off" placeholder="Search ...">\n    <a id="' + q.inputResetId + '" class="' + $.glass.reset + " " + $.hidden + '"></a>\n  </div>\n  <ul class="' + $.glass.result + '"></ul>\n', H.input = '\n  <div class="' + $.inputText.control + '">\n    <input type="text" id="' + q.inputQueryId + '" class="' + $.inputText.input + '" autocomplete="off" placeholder="Search ...">\n    <span class="' + $.inputText.icon + '"></span>\n    <button type="button" id="' + q.inputResetId + '" class="' + $.inputText.reset + " " + $.hidden + '"></button>\n  </div>\n  <ul class="' + $.inputText.result + '"></ul>\n';
      var K = function() {
        this.settings = { url: "https://photon.komoot.io/api/", params: { q: "", limit: 10, lang: "en" }, langs: ["de", "it", "fr", "en"] };
      };
      K.prototype.getParameters = function(t2) {
        return t2.lang = t2.lang.toLowerCase(), { url: this.settings.url, params: { q: t2.query, limit: t2.limit || this.settings.params.limit, lang: this.settings.langs.includes(t2.lang) ? t2.lang : this.settings.params.lang } };
      }, K.prototype.handleResponse = function(t2) {
        return t2.features.length === 0 ? [] : t2.features.map(function(t3) {
          return { lon: t3.geometry.coordinates[0], lat: t3.geometry.coordinates[1], address: { name: t3.properties.name, postcode: t3.properties.postcode, city: t3.properties.city, state: t3.properties.state, country: t3.properties.country }, original: { formatted: t3.properties.name, details: t3.properties } };
        });
      };
      var Z = function() {
        this.settings = { url: "https://nominatim.openstreetmap.org/search/", params: { q: "", format: "json", addressdetails: 1, limit: 10, countrycodes: "", "accept-language": "en-US" } };
      };
      Z.prototype.getParameters = function(t2) {
        return { url: this.settings.url, params: { q: t2.query, format: this.settings.params.format, addressdetails: this.settings.params.addressdetails, limit: t2.limit || this.settings.params.limit, countrycodes: t2.countrycodes || this.settings.params.countrycodes, "accept-language": t2.lang || this.settings.params["accept-language"] } };
      }, Z.prototype.handleResponse = function(t2) {
        return t2.length === 0 ? [] : t2.map(function(t3) {
          return { lon: t3.lon, lat: t3.lat, bbox: t3.boundingbox, address: { name: t3.display_name, road: t3.address.road || "", houseNumber: t3.address.house_number || "", postcode: t3.address.postcode, city: t3.address.city || t3.address.town, state: t3.address.state, country: t3.address.country }, original: { formatted: t3.display_name, details: t3.address } };
        });
      };
      var J = function() {
        this.settings = { url: "https://open.mapquestapi.com/nominatim/v1/search.php", params: { q: "", key: "", format: "json", addressdetails: 1, limit: 10, countrycodes: "", "accept-language": "en-US" } };
      };
      J.prototype.getParameters = function(t2) {
        return { url: this.settings.url, params: { q: t2.query, key: t2.key, format: "json", addressdetails: 1, limit: t2.limit || this.settings.params.limit, countrycodes: t2.countrycodes || this.settings.params.countrycodes, "accept-language": t2.lang || this.settings.params["accept-language"] } };
      }, J.prototype.handleResponse = function(t2) {
        return t2.length === 0 ? [] : t2.map(function(t3) {
          return { lon: t3.lon, lat: t3.lat, address: { name: t3.address.neighbourhood || "", road: t3.address.road || "", postcode: t3.address.postcode, city: t3.address.city || t3.address.town, state: t3.address.state, country: t3.address.country }, original: { formatted: t3.display_name, details: t3.address } };
        });
      };
      var W = function() {
        this.settings = { url: "https://dev.virtualearth.net/REST/v1/Locations", callbackName: "jsonp", params: { query: "", key: "", includeNeighborhood: 0, maxResults: 10 } };
      };
      W.prototype.getParameters = function(t2) {
        return { url: this.settings.url, callbackName: this.settings.callbackName, params: { query: t2.query, key: t2.key, includeNeighborhood: t2.includeNeighborhood || this.settings.params.includeNeighborhood, maxResults: t2.maxResults || this.settings.params.maxResults } };
      }, W.prototype.handleResponse = function(t2) {
        var e2 = t2.resourceSets[0].resources;
        return e2.length === 0 ? [] : e2.map(function(t3) {
          return { lon: t3.point.coordinates[1], lat: t3.point.coordinates[0], address: { name: t3.name }, original: { formatted: t3.address.formattedAddress, details: t3.address } };
        });
      };
      var X = function() {
        this.settings = { url: "https://api.opencagedata.com/geocode/v1/json?", params: { q: "", key: "", limit: 10, countrycode: "", pretty: 1, no_annotations: 1 } };
      };
      function Y(t2) {
        return new Promise(function(e2, n2) {
          var r2 = function(t3, e3) {
            e3 && typeof e3 == "object" && (t3 += (/\?/.test(t3) ? "&" : "?") + tt(e3));
            return t3;
          }(t2.url, t2.data);
          t2.jsonp ? function(t3, e3, n3) {
            var r3 = document.head, s2 = document.createElement("script"), o2 = "f" + Math.round(Math.random() * Date.now());
            s2.setAttribute("src", t3 + (t3.indexOf("?") > 0 ? "&" : "?") + e3 + "=" + o2), window[o2] = function(t4) {
              window[o2] = void 0, setTimeout(function() {
                return r3.removeChild(s2);
              }, 0), n3(t4);
            }, r3.append(s2);
          }(r2, t2.callbackName, e2) : fetch(r2, { method: "GET", mode: "cors", credentials: "same-origin" }).then(function(t3) {
            return t3.json();
          }).then(e2).catch(n2);
        });
      }
      function tt(t2) {
        return Object.keys(t2).reduce(function(e2, n2) {
          return e2.push(typeof t2[n2] == "object" ? tt(t2[n2]) : encodeURIComponent(n2) + "=" + encodeURIComponent(t2[n2])), e2;
        }, []).join("&");
      }
      X.prototype.getParameters = function(t2) {
        return { url: this.settings.url, params: { q: t2.query, key: t2.key, limit: t2.limit || this.settings.params.limit, countrycode: t2.countrycodes || this.settings.params.countrycodes } };
      }, X.prototype.handleResponse = function(t2) {
        return t2.results.length === 0 ? [] : t2.results.map(function(t3) {
          return { lon: t3.geometry.lng, lat: t3.geometry.lat, address: { name: t3.components.house_number || "", road: t3.components.road || "", postcode: t3.components.postcode, city: t3.components.city || t3.components.town, state: t3.components.state, country: t3.components.country }, original: { formatted: t3.formatted, details: t3.components } };
        });
      };
      var et = q.cssClasses, nt = function(t2, e2) {
        this.Base = t2, this.layerName = _("geocoder-layer-"), this.layer = new d.default({ name: this.layerName, source: new h.default() }), this.options = t2.options, this.options.provider = typeof this.options.provider == "string" ? this.options.provider.toLowerCase() : this.options.provider, this.provider = this.newProvider(), this.els = e2, this.lastQuery = "", this.container = this.els.container, this.registeredListeners = { mapClick: false }, this.setListeners();
      };
      return nt.prototype.setListeners = function() {
        var t2, e2, n2 = this;
        this.els.input.addEventListener("keypress", function(t3) {
          var e3 = t3.target.value.trim();
          (t3.key ? t3.key === "Enter" : t3.which ? t3.which === 13 : !!t3.keyCode && t3.keyCode === 13) && (t3.preventDefault(), n2.query(e3));
        }, false), this.els.input.addEventListener("click", function(t3) {
          return t3.stopPropagation();
        }, false), this.els.input.addEventListener("input", function(r2) {
          var s2 = r2.target.value.trim();
          s2.length !== 0 ? D(n2.els.reset, et.hidden) : O(n2.els.reset, et.hidden), n2.options.autoComplete && s2 !== e2 && (e2 = s2, t2 && clearTimeout(t2), t2 = setTimeout(function() {
            s2.length >= n2.options.autoCompleteMinLength && n2.query(s2);
          }, n2.options.autoCompleteTimeout));
        }, false), this.els.reset.addEventListener("click", function(t3) {
          n2.els.input.focus(), n2.els.input.value = "", n2.lastQuery = "", O(n2.els.reset, et.hidden), n2.clearResults();
        }, false), this.options.targetType === E && this.els.button.addEventListener("click", function(t3) {
          t3.stopPropagation(), V(n2.els.control, et.glass.expanded) ? n2.collapse() : n2.expand();
        }, false);
      }, nt.prototype.query = function(t2) {
        var e2 = this;
        this.provider || (this.provider = this.newProvider());
        var n2 = this.provider.getParameters({ query: t2, key: this.options.key, lang: this.options.lang, countrycodes: this.options.countrycodes, limit: this.options.limit });
        if (this.lastQuery !== t2 || !this.els.result.firstChild) {
          this.lastQuery = t2, this.clearResults(), O(this.els.reset, et.spin);
          var r2 = { url: n2.url, data: n2.params };
          n2.callbackName && (r2.jsonp = true, r2.callbackName = n2.callbackName), Y(r2).then(function(t3) {
            e2.options.debug && console.info(t3), D(e2.els.reset, et.spin);
            var n3 = e2.provider.handleResponse(t3);
            n3 && (e2.createList(n3), e2.listenMapClick());
          }).catch(function(t3) {
            D(e2.els.reset, et.spin);
            var n3 = B("li", "<h5>Error! No internet connection?</h5>");
            e2.els.result.append(n3);
          });
        }
      }, nt.prototype.createList = function(t2) {
        var e2 = this, n2 = this.els.result;
        t2.forEach(function(t3) {
          var r2;
          switch (e2.options.provider) {
            case T:
              r2 = '<span class="' + et.road + '">' + t3.address.name + "</span>";
              break;
            default:
              r2 = e2.addressTemplate(t3.address);
          }
          var s2 = B("li", '<a href="#">' + r2 + "</a>");
          s2.addEventListener("click", function(n3) {
            n3.preventDefault(), e2.chosen(t3, r2, t3.address, t3.original);
          }, false), n2.append(s2);
        });
      }, nt.prototype.chosen = function(t2, e2, n2, r2) {
        var s2 = this.Base.getMap(), o2 = [Number.parseFloat(t2.lon), Number.parseFloat(t2.lat)], i2 = s2.getView().getProjection(), a2 = y.default.transform(o2, "EPSG:4326", i2), l2 = t2.bbox;
        l2 && (l2 = y.default.transformExtent([l2[2], l2[1], l2[3], l2[0]], "EPSG:4326", i2));
        var u2 = { formatted: e2, details: n2, original: r2 };
        if (this.options.keepOpen === false && this.clearResults(true), this.options.preventDefault === true)
          this.Base.dispatchEvent({ type: C, address: u2, coordinate: a2, bbox: l2, place: t2 });
        else {
          l2 ? s2.getView().fit(l2, { duration: 500 }) : function(t3, e3, n3, r3) {
            n3 === void 0 && (n3 = 500), r3 === void 0 && (r3 = 2.388657133911758), t3.getView().animate({ duration: n3, resolution: r3 }, { duration: n3, center: e3 });
          }(s2, a2);
          var c2 = this.createFeature(a2, u2);
          this.Base.dispatchEvent({ type: C, address: u2, feature: c2, coordinate: a2, bbox: l2, place: t2 });
        }
      }, nt.prototype.createFeature = function(t2) {
        var e2 = new g.default(new m.default(t2));
        return this.addLayer(), e2.setStyle(this.options.featureStyle), e2.setId(_("geocoder-ft-")), this.getSource().addFeature(e2), e2;
      }, nt.prototype.addressTemplate = function(t2) {
        var e2 = [];
        return t2.name && e2.push(['<span class="', et.road, '">{name}</span>'].join("")), (t2.road || t2.building || t2.house_number) && e2.push(['<span class="', et.road, '">{building} {road} {house_number}</span>'].join("")), (t2.city || t2.town || t2.village) && e2.push(['<span class="', et.city, '">{postcode} {city} {town} {village}</span>'].join("")), (t2.state || t2.country) && e2.push(['<span class="', et.country, '">{state} {country}</span>'].join("")), Q(e2.join("<br>"), t2);
      }, nt.prototype.newProvider = function() {
        switch (this.options.provider) {
          case T:
            return new Z();
          case j:
            return new J();
          case F:
            return new K();
          case N:
            return new W();
          case R:
            return new X();
          default:
            return this.options.provider;
        }
      }, nt.prototype.expand = function() {
        var t2 = this;
        D(this.els.input, et.spin), O(this.els.control, et.glass.expanded), window.setTimeout(function() {
          return t2.els.input.focus();
        }, 100), this.listenMapClick();
      }, nt.prototype.collapse = function() {
        this.els.input.value = "", this.els.input.blur(), O(this.els.reset, et.hidden), D(this.els.control, et.glass.expanded), this.clearResults();
      }, nt.prototype.listenMapClick = function() {
        if (!this.registeredListeners.mapClick) {
          var t2 = this, e2 = this.Base.getMap().getTargetElement();
          this.registeredListeners.mapClick = true, e2.addEventListener("click", { handleEvent: function(n2) {
            t2.clearResults(true), e2.removeEventListener(n2.type, this, false), t2.registeredListeners.mapClick = false;
          } }, false);
        }
      }, nt.prototype.clearResults = function(t2) {
        t2 && this.options.targetType === E ? this.collapse() : function(t3) {
          for (; t3.firstChild; )
            t3.firstChild.remove();
        }(this.els.result);
      }, nt.prototype.getSource = function() {
        return this.layer.getSource();
      }, nt.prototype.addLayer = function() {
        var t2 = this, e2 = false, n2 = this.Base.getMap();
        n2.getLayers().forEach(function(n3) {
          n3 === t2.layer && (e2 = true);
        }), e2 || n2.addLayer(this.layer);
      }, function(t2) {
        function e2(n2, r2) {
          if (n2 === void 0 && (n2 = S), r2 === void 0 && (r2 = {}), !(this instanceof e2))
            return new e2();
          var s2;
          I(typeof n2 == "string", "@param `type` should be string!"), I(n2 === S || n2 === L, "@param 'type' should be '" + S + "'\n      or '" + L + "'!"), I(typeof r2 == "object", "@param `options` should be object!"), P.featureStyle = [new c.default({ image: new p.default({ scale: 0.7, src: "//cdn.rawgit.com/jonataswalker/map-utils/master/images/marker.png" }) })], this.options = function(t3, e3) {
            var n3 = {};
            for (var r3 in t3)
              Object.prototype.hasOwnProperty.call(t3, r3) && (n3[r3] = t3[r3]);
            for (var s3 in e3)
              Object.prototype.hasOwnProperty.call(e3, s3) && (n3[s3] = e3[s3]);
            return n3;
          }(P, r2), this.container = void 0;
          var o2 = new H(this);
          n2 === S && (this.container = o2.els.container, s2 = new nt(this, o2.els), this.layer = s2.layer), t2.call(this, { element: this.container });
        }
        return t2 && (e2.__proto__ = t2), e2.prototype = Object.create(t2 && t2.prototype), e2.prototype.constructor = e2, e2.prototype.getLayer = function() {
          return this.layer;
        }, e2.prototype.getSource = function() {
          return this.getLayer().getSource();
        }, e2.prototype.setProvider = function(t3) {
          this.options.provider = t3;
        }, e2.prototype.setProviderKey = function(t3) {
          this.options.key = t3;
        }, e2;
      }(u.default);
    });
  }
});

// dep:ol-geocoder
var ol_geocoder_default = require_ol_geocoder();
export {
  ol_geocoder_default as default
};
/*!
 * ol-geocoder - v4.1.2
 * A geocoder extension for OpenLayers.
 * https://github.com/jonataswalker/ol-geocoder
 * Built: Wed Jan 20 2021 10:05:05 GMT-0300 (Brasilia Standard Time)
 */
//# sourceMappingURL=ol-geocoder.js.map
